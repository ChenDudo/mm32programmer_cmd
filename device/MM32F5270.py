"""
 Flash OS Routines (Automagically Generated)
 Copyright (c) 2017-2017 ARM Limited
"""
from .flash import Flash

"""
 Flash OS Routines (Automagically Generated)
 Copyright (c) 2017-2017 ARM Limited
"""
class MM32F5270(object):
    CHIP_CORE = 'STAR-MC1'

    PAGE_SIZE = 1024 * 1
    SECT_SIZE = 1024 * 1
    CHIP_SIZE = 1024 * 256

    def __init__(self, xlink):
        super(MM32F5270, self).__init__()

        self.xlink = xlink

        self.flash = Flash(self.xlink, MM32F5270_flash_algo)

    def sect_erase(self, addr, size):
        self.flash.Init(0, 0, 1)
        for i in range(addr // self.SECT_SIZE, (addr + size + (self.SECT_SIZE - 1)) // self.SECT_SIZE):
            self.flash.EraseSector(self.SECT_SIZE * i)
        self.flash.UnInit(1)

    def chip_write(self, addr, data):
        self.sect_erase(addr, len(data))

        self.flash.Init(0, 0, 2)
        for i in range(0, len(data)//self.PAGE_SIZE):
            self.flash.ProgramPage(0x08000000 + addr + self.PAGE_SIZE * i, data[self.PAGE_SIZE*i : self.PAGE_SIZE*(i+1)])
        self.flash.UnInit(2)

    def chip_read(self, addr, size, buff):
        c_char_Array = self.xlink.read_mem(0x08000000 + addr, size)

        buff.extend(list(bytes(c_char_Array)))

    def chip_erase(self):
        self.flash.Init(0, 0, 4)
        self.flash.EraseChip()
        self.flash.UnInit(4)

class MM32F5280(MM32F5270):
    PAGE_SIZE = 1024 * 1
    SECT_SIZE = 1024 * 1
    CHIP_SIZE = 1024 * 256

    def __init__(self, xlink):
        super().__init__(xlink)

        self.flash = Flash(self.xlink, MM32F5270_flash_algo)


MM32F5270_flash_algo = {
    'load_address' : 0x20000000,
    'instructions' : [
    0x00, 0xBE, 0x0A, 0xE0, 0x0D, 0x78, 0x2D, 0x06, 0x68, 0x40, 0x08, 0x24, 0x40, 0x00, 0x00, 0xD3, 
    0x58, 0x40, 0x64, 0x1E, 0xFA, 0xD1, 0x49, 0x1C, 0x52, 0x1E, 0x00, 0x2A, 0xF2, 0xD1, 0x70, 0x47, 
    0x42, 0xF2, 0x04, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x40, 0xF2, 0x23, 0x11, 0xC4, 0xF2, 0x67, 0x51, 
    0x01, 0x60, 0x48, 0xF6, 0xAB, 0x11, 0xCC, 0xF6, 0xEF, 0x51, 0x01, 0x60, 0x70, 0x47, 0x00, 0xBF, 
    0x83, 0xB0, 0x02, 0x90, 0x01, 0x91, 0x00, 0x92, 0x42, 0xF2, 0x04, 0x00, 0xC4, 0xF2, 0x02, 0x00, 
    0x40, 0xF2, 0x23, 0x11, 0xC4, 0xF2, 0x67, 0x51, 0x01, 0x60, 0x48, 0xF6, 0xAB, 0x12, 0xCC, 0xF6, 
    0xEF, 0x52, 0x02, 0x60, 0x42, 0xF2, 0x08, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x60, 0x02, 0x60, 
    0x42, 0xF2, 0x00, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x21, 0x01, 0x60, 0x42, 0xF2, 0x0C, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x14, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x1C, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0x40, 0x07, 0x00, 0x28, 0x15, 0xD4, 0xFF, 0xE7, 0x43, 0xF2, 
    0x00, 0x00, 0xC4, 0xF2, 0x00, 0x00, 0x45, 0xF2, 0x55, 0x51, 0x01, 0x60, 0x43, 0xF2, 0x04, 0x00, 
    0xC4, 0xF2, 0x00, 0x00, 0x06, 0x21, 0x01, 0x60, 0x43, 0xF2, 0x08, 0x00, 0xC4, 0xF2, 0x00, 0x00, 
    0x40, 0xF6, 0xFF, 0x71, 0x01, 0x60, 0xFF, 0xE7, 0x00, 0x20, 0x03, 0xB0, 0x70, 0x47, 0x00, 0xBF, 
    0x81, 0xB0, 0x00, 0x90, 0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 
    0x80, 0x01, 0x01, 0x60, 0x01, 0x68, 0x21, 0xF4, 0x80, 0x71, 0x01, 0x60, 0x00, 0x20, 0x01, 0xB0, 
    0x70, 0x47, 0x00, 0xBF, 0x81, 0xB0, 0x42, 0xF2, 0x14, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x4F, 0xF0, 
    0x00, 0x61, 0x01, 0x60, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 
    0x14, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 
    0x04, 0x01, 0x01, 0x60, 0x01, 0x68, 0x41, 0xF0, 0x40, 0x01, 0x01, 0x60, 0xFF, 0xE7, 0x42, 0xF2, 
    0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0xC0, 0x07, 0x00, 0x28, 0x08, 0xD0, 0xFF, 0xE7, 
    0x43, 0xF2, 0x00, 0x00, 0xC4, 0xF2, 0x00, 0x00, 0x4A, 0xF6, 0xAA, 0x21, 0x01, 0x60, 0xEE, 0xE7, 
    0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x21, 0xF0, 0x04, 0x01, 0x01, 0x60, 
    0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0x10, 0xF0, 0x14, 0x0F, 0x0B, 0xD0, 
    0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x14, 0x01, 
    0x01, 0x60, 0x01, 0x20, 0x00, 0x90, 0x02, 0xE0, 0x00, 0x20, 0x00, 0x90, 0xFF, 0xE7, 0x00, 0x98, 
    0x01, 0xB0, 0x70, 0x47, 0x82, 0xB0, 0x00, 0x90, 0x00, 0x98, 0x42, 0xF2, 0x14, 0x01, 0xC4, 0xF2, 
    0x02, 0x01, 0x08, 0x60, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 
    0x14, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x08, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x40, 0xF2, 0x23, 0x11, 
    0xC4, 0xF2, 0x67, 0x51, 0x01, 0x60, 0x48, 0xF6, 0xAB, 0x11, 0xCC, 0xF6, 0xEF, 0x51, 0x01, 0x60, 
    0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x20, 0x01, 0x01, 0x60, 
    0x01, 0x68, 0x41, 0xF0, 0x40, 0x01, 0x01, 0x60, 0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 
    0x02, 0x00, 0x00, 0x68, 0xC0, 0x07, 0x00, 0x28, 0x08, 0xD0, 0xFF, 0xE7, 0x43, 0xF2, 0x00, 0x00, 
    0xC4, 0xF2, 0x00, 0x00, 0x4A, 0xF6, 0xAA, 0x21, 0x01, 0x60, 0xEE, 0xE7, 0x42, 0xF2, 0x10, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x21, 0xF0, 0x20, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x0C, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0x10, 0xF0, 0x14, 0x0F, 0x0B, 0xD0, 0xFF, 0xE7, 0x42, 0xF2, 
    0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x14, 0x01, 0x01, 0x60, 0x01, 0x20, 
    0x01, 0x90, 0x02, 0xE0, 0x00, 0x20, 0x01, 0x90, 0xFF, 0xE7, 0x01, 0x98, 0x02, 0xB0, 0x70, 0x47, 
    0x80, 0xB5, 0x82, 0xB0, 0xFF, 0xF7, 0xE4, 0xFE, 0x4F, 0xF6, 0x00, 0x00, 0xC1, 0xF6, 0xFF, 0x70, 
    0x00, 0x90, 0xFF, 0xF7, 0x97, 0xFF, 0x42, 0xF2, 0x10, 0x01, 0xC4, 0xF2, 0x02, 0x01, 0x0A, 0x68, 
    0x41, 0xF6, 0xEF, 0x73, 0x1A, 0x40, 0x0A, 0x60, 0x0A, 0x68, 0x42, 0xF0, 0x10, 0x02, 0x0A, 0x60, 
    0x45, 0xF6, 0xA5, 0x21, 0x00, 0x9A, 0x11, 0x80, 0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 
    0x02, 0x00, 0x00, 0x68, 0xC0, 0x07, 0x00, 0x28, 0x08, 0xD0, 0xFF, 0xE7, 0x43, 0xF2, 0x00, 0x00, 
    0xC4, 0xF2, 0x00, 0x00, 0x4A, 0xF6, 0xAA, 0x21, 0x01, 0x60, 0xEE, 0xE7, 0x42, 0xF2, 0x10, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x21, 0xF0, 0x10, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x0C, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0x10, 0xF0, 0x14, 0x0F, 0x0B, 0xD0, 0xFF, 0xE7, 0x42, 0xF2, 
    0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x14, 0x01, 0x01, 0x60, 0x01, 0x20, 
    0x01, 0x90, 0x02, 0xE0, 0x00, 0x20, 0x01, 0x90, 0xFF, 0xE7, 0x01, 0x98, 0x02, 0xB0, 0x80, 0xBD, 
    0x80, 0xB5, 0x84, 0xB0, 0xFF, 0xF7, 0xAC, 0xFF, 0x03, 0x90, 0xFF, 0xF7, 0xFB, 0xFE, 0x00, 0x21, 
    0xC1, 0xF6, 0xFE, 0x71, 0x02, 0x90, 0x08, 0x46, 0xFF, 0xF7, 0x44, 0xFF, 0x00, 0x21, 0x01, 0x90, 
    0x08, 0x46, 0x04, 0xB0, 0x80, 0xBD, 0x00, 0xBF, 0x82, 0xB0, 0x00, 0x90, 0x42, 0xF2, 0x0C, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x14, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x10, 0x00, 
    0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x02, 0x01, 0x01, 0x60, 0x00, 0x99, 0x42, 0xF2, 
    0x14, 0x02, 0xC4, 0xF2, 0x02, 0x02, 0x11, 0x60, 0x01, 0x68, 0x41, 0xF0, 0x40, 0x01, 0x01, 0x60, 
    0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0xC0, 0x07, 0x00, 0x28, 
    0x08, 0xD0, 0xFF, 0xE7, 0x43, 0xF2, 0x00, 0x00, 0xC4, 0xF2, 0x00, 0x00, 0x4A, 0xF6, 0xAA, 0x21, 
    0x01, 0x60, 0xEE, 0xE7, 0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x21, 0xF0, 
    0x02, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0x10, 0xF0, 
    0x14, 0x0F, 0x0B, 0xD0, 0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 
    0x41, 0xF0, 0x14, 0x01, 0x01, 0x60, 0x01, 0x20, 0x01, 0x90, 0x02, 0xE0, 0x00, 0x20, 0x01, 0x90, 
    0xFF, 0xE7, 0x01, 0x98, 0x02, 0xB0, 0x70, 0x47, 0x83, 0xB0, 0x13, 0x46, 0x02, 0x90, 0x01, 0x91, 
    0x8D, 0xF8, 0x03, 0x20, 0x01, 0x20, 0x03, 0xB0, 0x70, 0x47, 0x00, 0xBF, 0x84, 0xB0, 0x02, 0x90, 
    0x01, 0x91, 0x00, 0x92, 0x01, 0x98, 0x01, 0x30, 0x20, 0xF0, 0x01, 0x00, 0x01, 0x90, 0x42, 0xF2, 
    0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x41, 0xF0, 0x04, 0x01, 0x01, 0x60, 0xFF, 0xE7, 
    0x01, 0x98, 0x00, 0x28, 0x44, 0xD0, 0xFF, 0xE7, 0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 
    0x01, 0x68, 0x41, 0xF0, 0x01, 0x01, 0x01, 0x60, 0x00, 0x98, 0x00, 0x88, 0x02, 0x99, 0x08, 0x80, 
    0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0xC0, 0x07, 0x00, 0x28, 
    0x08, 0xD0, 0xFF, 0xE7, 0x43, 0xF2, 0x00, 0x00, 0xC4, 0xF2, 0x00, 0x00, 0x4A, 0xF6, 0xAA, 0x21, 
    0x01, 0x60, 0xEE, 0xE7, 0x42, 0xF2, 0x10, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 0x21, 0xF0, 
    0x01, 0x01, 0x01, 0x60, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x00, 0x68, 0x10, 0xF0, 
    0x14, 0x0F, 0x0B, 0xD0, 0xFF, 0xE7, 0x42, 0xF2, 0x0C, 0x00, 0xC4, 0xF2, 0x02, 0x00, 0x01, 0x68, 
    0x41, 0xF0, 0x14, 0x01, 0x01, 0x60, 0x01, 0x20, 0x03, 0x90, 0x0C, 0xE0, 0x02, 0x98, 0x02, 0x30, 
    0x02, 0x90, 0x00, 0x98, 0x02, 0x30, 0x00, 0x90, 0x01, 0x98, 0x02, 0x38, 0x01, 0x90, 0xB7, 0xE7, 
    0x00, 0x20, 0x03, 0x90, 0xFF, 0xE7, 0x03, 0x98, 0x04, 0xB0, 0x70, 0x47, 0x00, 0x00, 0x00, 0x00, 
    ],

    'pc_Init'            : 0x20000041,
    'pc_UnInit'          : 0x200000D1,
    'pc_EraseSector'     : 0x20000319,
    'pc_ProgramPage'     : 0x200003CD,
    'pc_Verify'          : 0x12000001F,
    'pc_EraseChip'       : 0x200002F1,
    'pc_BlankCheck'      : 0x200003B9,
    'pc_Read'            : 0x12000001F,
    
    'static_base'        : 0x20000400,
    'begin_data'         : 0x20000800,
    'begin_stack'        : 0x20001000,

    'analyzer_supported' : False,

    # Relative region addresses and sizes
    'ro_start'           : 0x00000000,
    'ro_size'            : 0x000002C0,
    'rw_start'           : 0x000002C0,
    'rw_size'            : 0x00000004,
    'zi_start'           : 0x000002C4,
    'zi_size'            : 0x00000000,

    # Flash information
    'flash_start'        : 0x08000000,
    'flash_size'         : 0x00040000,
    'flash_page_size'    : 0x00000400,
    'sector_sizes': (
        (0x00000, 0x00400),
    )
}
