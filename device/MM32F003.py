"""
 Flash OS Routines (Automagically Generated)
 Copyright (c) 2017-2017 ARM Limited
"""
from .flash import Flash

"""
 Flash OS Routines (Automagically Generated)
 Copyright (c) 2017-2017 ARM Limited
"""
class MM32F003(object):
    CHIP_CORE = 'Cortex-M0'

    PAGE_SIZE = 1024 * 1 // 2
    SECT_SIZE = 1024 * 1
    CHIP_SIZE = 1024 * 16

    def __init__(self, xlink):
        super(MM32F003, self).__init__()

        self.xlink = xlink

        self.flash = Flash(self.xlink, MM32F003_flash_algo)

    def sect_erase(self, addr, size):
        self.flash.Init(0, 0, 1)
        for i in range(addr // self.SECT_SIZE, (addr + size + (self.SECT_SIZE - 1)) // self.SECT_SIZE):
            self.flash.EraseSector(self.SECT_SIZE * i)
        self.flash.UnInit(1)

    def chip_write(self, addr, data):
        # self.sect_erase(addr, len(data))

        self.flash.Init(0, 0, 2)
        for i in range(0, len(data)//self.PAGE_SIZE):
            self.flash.ProgramPage(0x08000000 + addr + self.PAGE_SIZE * i, data[self.PAGE_SIZE*i : self.PAGE_SIZE*(i+1)])
        self.flash.UnInit(2)

    def chip_read(self, addr, size, buff):
        c_char_Array = self.xlink.read_mem(0x08000000 + addr, size)

        buff.extend(list(bytes(c_char_Array)))

    def chip_erase(self):
        self.flash.Init(0, 0, 4)
        self.flash.EraseChip()
        self.flash.UnInit(4)

MM32F003_flash_algo = {
    'load_address' : 0x20000000,
    'instructions' : [
    0x00, 0xBE, 0x0A, 0xE0, 0x0D, 0x78, 0x2D, 0x06, 0x68, 0x40, 0x08, 0x24, 0x40, 0x00, 0x00, 0xD3, 
    0x58, 0x40, 0x64, 0x1E, 0xFA, 0xD1, 0x49, 0x1C, 0x52, 0x1E, 0x00, 0x2A, 0xF2, 0xD1, 0x70, 0x47, 
    0x79, 0x48, 0x78, 0x49, 0x41, 0x60, 0x79, 0x49, 0x41, 0x60, 0x70, 0x47, 0x76, 0x48, 0x75, 0x4A, 
    0x42, 0x60, 0x76, 0x49, 0x41, 0x60, 0x82, 0x60, 0x81, 0x60, 0x00, 0x21, 0x01, 0x60, 0xC1, 0x68, 
    0x14, 0x22, 0x11, 0x43, 0xC1, 0x60, 0xC0, 0x69, 0x40, 0x07, 0x06, 0xD4, 0x71, 0x48, 0x70, 0x49, 
    0x01, 0x60, 0x06, 0x21, 0x41, 0x60, 0x70, 0x49, 0x81, 0x60, 0x00, 0x20, 0x70, 0x47, 0x6A, 0x48, 
    0x01, 0x69, 0x80, 0x22, 0x11, 0x43, 0x01, 0x61, 0x01, 0x69, 0x82, 0x15, 0x91, 0x43, 0x01, 0x61, 
    0x00, 0x20, 0x70, 0x47, 0x30, 0xB5, 0x01, 0x21, 0x63, 0x48, 0xC9, 0x06, 0x41, 0x61, 0xC1, 0x68, 
    0x14, 0x24, 0x21, 0x43, 0xC1, 0x60, 0x01, 0x69, 0x04, 0x25, 0x29, 0x43, 0x01, 0x61, 0x01, 0x69, 
    0x40, 0x22, 0x11, 0x43, 0x01, 0x61, 0x61, 0x49, 0x5E, 0x4A, 0x00, 0xE0, 0x11, 0x60, 0xC3, 0x68, 
    0xDB, 0x07, 0xFB, 0xD1, 0x01, 0x69, 0xA9, 0x43, 0x01, 0x61, 0xC1, 0x68, 0x21, 0x42, 0x04, 0xD0, 
    0xC1, 0x68, 0x21, 0x43, 0xC1, 0x60, 0x01, 0x20, 0x30, 0xBD, 0x00, 0x20, 0x30, 0xBD, 0x30, 0xB5, 
    0x51, 0x49, 0x48, 0x61, 0xC8, 0x68, 0x14, 0x23, 0x18, 0x43, 0xC8, 0x60, 0x4D, 0x48, 0x88, 0x60, 
    0x4E, 0x48, 0x88, 0x60, 0x08, 0x69, 0x20, 0x24, 0x20, 0x43, 0x08, 0x61, 0x08, 0x69, 0x40, 0x22, 
    0x10, 0x43, 0x08, 0x61, 0x4D, 0x48, 0x4B, 0x4A, 0x00, 0xE0, 0x10, 0x60, 0xCD, 0x68, 0xED, 0x07, 
    0xFB, 0xD1, 0x08, 0x69, 0xA0, 0x43, 0x08, 0x61, 0xC8, 0x68, 0x18, 0x40, 0x03, 0xD0, 0xC8, 0x68, 
    0x18, 0x43, 0xC8, 0x60, 0x01, 0x20, 0x30, 0xBD, 0x30, 0xB5, 0xFF, 0xF7, 0x89, 0xFF, 0x44, 0x4D, 
    0x28, 0x46, 0xFF, 0xF7, 0xD4, 0xFF, 0x3C, 0x49, 0x08, 0x69, 0x42, 0x4A, 0x10, 0x40, 0x08, 0x61, 
    0x08, 0x69, 0x10, 0x24, 0x20, 0x43, 0x08, 0x61, 0x3F, 0x48, 0x28, 0x80, 0x3B, 0x48, 0x39, 0x4A, 
    0x00, 0xE0, 0x10, 0x60, 0xCB, 0x68, 0xDB, 0x07, 0xFB, 0xD1, 0x08, 0x69, 0xA0, 0x43, 0x08, 0x61, 
    0xC8, 0x68, 0x14, 0x22, 0x10, 0x40, 0x03, 0xD0, 0xC8, 0x68, 0x10, 0x43, 0xC8, 0x60, 0x01, 0x20, 
    0x30, 0xBD, 0x00, 0xB5, 0xFF, 0xF7, 0xD8, 0xFF, 0xFF, 0xF7, 0x8C, 0xFF, 0x33, 0x48, 0xFF, 0xF7, 
    0xAE, 0xFF, 0x00, 0x20, 0x00, 0xBD, 0x30, 0xB5, 0x27, 0x49, 0xCA, 0x68, 0x14, 0x23, 0x1A, 0x43, 
    0xCA, 0x60, 0x0A, 0x69, 0x02, 0x24, 0x22, 0x43, 0x0A, 0x61, 0x48, 0x61, 0x08, 0x69, 0x40, 0x22, 
    0x10, 0x43, 0x08, 0x61, 0x25, 0x48, 0x23, 0x4A, 0x00, 0xE0, 0x10, 0x60, 0xCD, 0x68, 0xED, 0x07, 
    0xFB, 0xD1, 0x08, 0x69, 0xA0, 0x43, 0x08, 0x61, 0xC8, 0x68, 0x18, 0x40, 0x03, 0xD0, 0xC8, 0x68, 
    0x18, 0x43, 0xC8, 0x60, 0x01, 0x20, 0x30, 0xBD, 0x01, 0x20, 0x70, 0x47, 0xF0, 0xB5, 0x16, 0x4D, 
    0x49, 0x1C, 0x49, 0x08, 0xEB, 0x68, 0x49, 0x00, 0x04, 0x24, 0x23, 0x43, 0xEB, 0x60, 0x14, 0x27, 
    0x16, 0x4C, 0x1A, 0xE0, 0x2B, 0x69, 0x01, 0x26, 0x33, 0x43, 0x2B, 0x61, 0x13, 0x88, 0x03, 0x80, 
    0x10, 0x4B, 0x00, 0xE0, 0x1C, 0x60, 0xEE, 0x68, 0xF6, 0x07, 0xFB, 0xD1, 0x2B, 0x69, 0x5B, 0x08, 
    0x5B, 0x00, 0x2B, 0x61, 0xEB, 0x68, 0x3B, 0x42, 0x04, 0xD0, 0xE8, 0x68, 0x38, 0x43, 0xE8, 0x60, 
    0x01, 0x20, 0xF0, 0xBD, 0x80, 0x1C, 0x89, 0x1E, 0x92, 0x1C, 0x00, 0x29, 0xE2, 0xD1, 0x00, 0x20, 
    0xF0, 0xBD, 0x00, 0x00, 0x23, 0x01, 0x67, 0x45, 0x00, 0x20, 0x02, 0x40, 0xAB, 0x89, 0xEF, 0xCD, 
    0x55, 0x55, 0x00, 0x00, 0x00, 0x30, 0x00, 0x40, 0xFF, 0x0F, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00, 
    0x00, 0xF8, 0xFF, 0x1F, 0xEF, 0x1F, 0x00, 0x00, 0xA5, 0x5A, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x1F, 
    0x00, 0x00, 0x00, 0x00, 
    ],

    'pc_Init'            : 0x2000002D,
    'pc_UnInit'          : 0x2000005F,
    'pc_EraseSector'     : 0x20000167,
    'pc_ProgramPage'     : 0x200001AD,
    'pc_Verify'          : 0x12000001F,
    'pc_EraseChip'       : 0x20000153,
    'pc_BlankCheck'      : 0x200001A9,
    'pc_Read'            : 0x12000001F,
    
    'static_base'        : 0x20000300,
    'begin_data'         : 0x20000400,
    'begin_stack'        : 0x20000800,

    'analyzer_supported' : False,

    # Relative region addresses and sizes
    'ro_start'           : 0x00000000,
    'ro_size'            : 0x00000204,
    'rw_start'           : 0x00000204,
    'rw_size'            : 0x00000004,
    'zi_start'           : 0x00000208,
    'zi_size'            : 0x00000000,

    # Flash information
    'flash_start'        : 0x08000000,
    'flash_size'         : 0x00004000,
    'flash_page_size'    : 0x00000400,
    'sector_sizes': (
        (0x00000, 0x00400),
    )
}
